/*
 * generated by Xtext 2.21.0
 */
package org.invoice.generator

import java.util.ArrayList
import java.util.List
import java.util.HashMap
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.invoice.generator.pojo.json.ConstraintCheckJson
import org.invoice.generator.pojo.json.FieldJson
import org.invoice.generator.pojo.json.InvoiceJson
import org.invoice.generator.pojo.json.LibraryJson
import org.invoice.generator.pojo.json.ResultSetJson
import org.invoice.generator.pojo.json.TagJson
import org.invoice.invoiceqlDsl.AddUblLibraryStatement
import org.invoice.invoiceqlDsl.CreateDocumentInvoiceStatement
import org.invoice.invoiceqlDsl.Datatype
import org.invoice.invoiceqlDsl.DeclareConstraintCheckStatement
import org.invoice.invoiceqlDsl.DeclareFieldStatement
import org.invoice.invoiceqlDsl.Function
import org.invoice.invoiceqlDsl.Script
import org.invoice.invoiceqlDsl.SelectInvoiceStatement
import org.invoice.util.JsonUtil
import org.invoice.invoiceqlDsl.DefineTagStatement
import org.invoice.generator.function.FunctionAppPython
import org.invoice.generator.function.FunctionXml

/**
 * Generates code from your model files on save.
 * 
 * By. Edwar Rojas - edwar.red@gmail.com
 */
class InvoiceqlDslGenerator extends AbstractGenerator {

	HashMap<String, ConstraintCheckJson> mapConstraint = new HashMap();
	List <FieldJson> listField = new ArrayList();
	HashMap<String, InvoiceJson> mapInvoice = new HashMap();
	HashMap<String, LibraryJson> mapLibrary = new HashMap();
	List<TagJson> lstTag = new ArrayList();

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		mapConstraint = new HashMap();
		listField = new ArrayList();
		mapLibrary = new HashMap();
		lstTag = new ArrayList();

		for (script : resource.allContents.toIterable.filter(Script)) {
			// 1- Buid Objects
			for (statement : script.statementList) {
				if (statement instanceof DeclareConstraintCheckStatement) {
					compileDeclareConstraintCheckStatement(statement, fsa)
				}
				if (statement instanceof DeclareFieldStatement) {
					compileDeclareFieldStatement(statement, fsa)
				}
				if (statement instanceof CreateDocumentInvoiceStatement) {
					compileCreateDocumentInvoiceStatement(statement, fsa)
				}
				if (statement instanceof CreateDocumentInvoiceStatement) {
					compileCreateDocumentInvoiceStatement(statement, fsa)
				}
				if (statement instanceof AddUblLibraryStatement) {
					compileAddUblLibraryStatement(statement, fsa)
				}
				if (statement instanceof DefineTagStatement) {
					compileDefineTagStatement(statement, fsa)
				}
			}
			// 2- Select Querys
			for (statement : script.statementList) {
				if (statement instanceof SelectInvoiceStatement) {
					compileSelectInvoiceStatement(statement, fsa)
				}
			}
		}

	/*// Generate JSON files
	 * generateFileConstraints(fsa);
	 * generateFileFields(fsa);
	 generateFileInvoices(fsa);*/
	}

	def getValueToJson(Datatype value) {
		if (value.stringVal != null) {
			return value.stringVal;
		}
		if (value.boolVal != null) {
			return value.boolVal;
		}
		if (value.doubleVal != null) {
			return value.doubleVal;
		}
		if (value.integerVal != null) {
			return value.integerVal;
		}
		return null;
	}

	def compileDeclareConstraintCheckStatement(DeclareConstraintCheckStatement statement, IFileSystemAccess2 fsa) {
		var constraint = new ConstraintCheckJson();
		constraint.id = statement.name;
		var items = new ArrayList();
		for (value : statement.items) {
			items.add(getValueToJson(value));
		}
		constraint.items = items;
		mapConstraint.put(constraint.id, constraint);
	}

	def generateFileConstraints(IFileSystemAccess2 fsa) {
		var mapJson = new HashMap();
		mapJson.put("constraints", mapConstraint);
		var json = JsonUtil.mapToJson(mapJson);
		json = JsonUtil.jsonPretty(json);
		fsa.generateFile("_constraints.json", json);
	}

	def compileDeclareFieldStatement(DeclareFieldStatement statement, IFileSystemAccess2 fsa) {
		var field = new FieldJson();
		field.id = statement.name;
		field.name = statement.nameField;
		field.datatype = statement.datatype;
		field.note = statement.note;
		if (statement.notnull != null) {
			field.nullable = false;
		}
		if (statement.constraint != null) {
			field.constraint = mapConstraint.get(statement.constraint);
		}
		listField.add(field);
	}

	def generateFileFields(IFileSystemAccess2 fsa) {
		var mapJson = new HashMap();
		mapJson.put("fields", listField);
		var json = JsonUtil.mapToJson(mapJson);
		json = JsonUtil.jsonPretty(json);
		fsa.generateFile("_fields.json", json);
	}

	def compileCreateDocumentInvoiceStatement(CreateDocumentInvoiceStatement statement, IFileSystemAccess2 fsa) {
		var invoice = new InvoiceJson();
		invoice.id = statement.name;
		var i = 0;
		for (f : statement.fields) {
			invoice.mapValues.put(f, getValueToJson(statement.values.get(i)));
			i++;
		}
		mapInvoice.put(invoice.id, invoice);
	}

	def generateFileInvoices(IFileSystemAccess2 fsa) {
		var mapJson = new HashMap();
		mapJson.put("invoices", mapInvoice);
		var json = JsonUtil.mapToJson(mapJson);
		json = JsonUtil.jsonPretty(json);
		fsa.generateFile("_invoices.json", json);
	}

	def compileSelectInvoiceStatement(SelectInvoiceStatement statement, IFileSystemAccess2 fsa) {
		if (statement.where != null) {
			if (statement.whereId != null) {
				queryWhereId(statement, fsa);
			} else {
				queryWhereField(statement, fsa);
			}
		}
		if (statement.function != null) {
			queryFunction(statement, fsa);
		}
	}

	def queryWhereId(SelectInvoiceStatement statement, IFileSystemAccess2 fsa) {
		var inv = mapInvoice.get(statement.idfield);
		buildResultSet(inv, fsa);
	}

	def queryWhereField(SelectInvoiceStatement statement, IFileSystemAccess2 fsa) {
		for (inv : mapInvoice.values) {
			if (inv.mapValues.get(statement.idfield).equals(getValueToJson(statement.valWhere))) {
				buildResultSet(inv, fsa);
				return;
			}
		}
		buildResultSet(null, fsa);
	}

	def queryFunction(SelectInvoiceStatement statement, IFileSystemAccess2 fsa) {
		if (statement.function.name == "xml") {
			functionXml(statement.function, fsa);
		}
		if (statement.function.name == "pdf") {
			functionPdf(statement.function, fsa);
		}
		if (statement.function.name == "loadAppPython") {
			functionLoadAppPython(statement.function, fsa);
		}
		if (statement.function.name == "send") {
			functionSend(statement.function, fsa);
		}
	}

	def buildResultSet(InvoiceJson inv, IFileSystemAccess2 fsa) {
		var res = new ResultSetJson();
		res.successful = true;
		if (inv != null) {
			res.invoicesResult.add(inv);
		}
		var json = JsonUtil.objectToJson(res);
		fsa.generateFile("_result-query.json", JsonUtil.jsonPretty(json));
	}

	def functionXml(Function func, IFileSystemAccess2 fsa) {
		var idinvoice = getValueToJson(func.args.get(0));
		var pathFile = getValueToJson(func.args.get(1));
			
		
		var xml=""
		var fac=mapInvoice.get(idinvoice);
		if(fac==null){
			xml="Invoice "+idinvoice+" not found !"
		}else{
			var funcXml=new FunctionXml(fac);
			xml=funcXml.getContentXml();
		}
		
		fsa.generateFile(pathFile, xml);
	}

	def functionPdf(Function func, IFileSystemAccess2 fsa) {
		var idinvoice = getValueToJson(func.args.get(0));
		var pathFile = getValueToJson(func.args.get(1));
		fsa.generateFile(pathFile, "pdf content");
	}

	def functionLoadAppPython(Function func, IFileSystemAccess2 fsa) {
		var pathSrc = getValueToJson(func.args.get(0));
		var app = new FunctionAppPython(pathSrc, fsa, mapLibrary, lstTag, mapInvoice,listField);
		app.generateSrc();
	}

	def functionSend(Function func, IFileSystemAccess2 fsa) {
	}

	def compileAddUblLibraryStatement(AddUblLibraryStatement statement, IFileSystemAccess2 fsa) {
		var lib = new LibraryJson();
		lib.id = statement.name;
		lib.ns = statement.ns;
		lib.prefix = statement.prefix;
		mapLibrary.put(lib.id, lib);
	}

	def compileDefineTagStatement(DefineTagStatement statement, IFileSystemAccess2 fsa) {
		var tag = new TagJson();
		tag.id = statement.name;
		tag.field = statement.field;
		tag.library = statement.library;
		tag.parent = statement.parent;

		var i = 0;
		for (attrName : statement.attrsName) {
			tag.attrs.put(attrName, getValueToJson(statement.attrsVal.get(i)));
			i++;
		}
		lstTag.add(tag);
	}

}
